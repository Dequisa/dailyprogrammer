#encoding=utf-8
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
#Runs in 0.768698 seconds
import time

startTime = time.clock()

def primesInRange(limit):
    potentialPrimes = limit * [True]
    for index in xrange(2, limit):
        if potentialPrimes[index]:
            yield index
            for y in xrange(2 * index, limit, index):
                potentialPrimes[y] = False

primeList = []
for element in primesInRange(1000000):
    primeList.append(element)

def nthTriangleNum(n):
    return (n*(n+1))/2

def divisorCount(n):
    factors = {}
    count = 1
    for prime in primeList:
        while n%prime==0:
            n = n/prime
            if prime in factors:
                factors[prime] += 1
            else:
                factors[prime] = 1
        if n==1:
            break
    for key in factors:
        count = count * (factors[key] + 1)
    return count

answer = 0

currentNum = 1
while answer == 0:
    if divisorCount(nthTriangleNum(currentNum)) > 500:
        answer = nthTriangleNum(currentNum)
    currentNum += 1

print answer, time.clock() - startTime

